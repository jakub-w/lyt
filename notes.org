* Notes
** Backend/API (C++)
auto query = yt.Search("foo");
query = yt.Search("foo").Order(yt::DATE_ORDER).MaxResults(10);
query.Perform();

This is how .NET does that.

yt.Search(), yt.Videos(), yt.Thumbnails() and other base operations each would return their dedicated objects of class derived from BaseOperation (which is inheriting OperationInterface) that would define functions to set parameters of the query.

Perform() function is defined in BaseOperation and it collects all the set perameters, creates a query and sends it.

Each concrete Operation class has to define set of functions that modify parameters map (parameters_).
For Operations to be savable and modifiable they should store query parameters in variables and generate the query on Perform().
They will be stored in a map. The declaration of this map is in the BaseOperation class.

Addition of an API key to the parameter list could be done in BaseOperation. Or it can be done in CURLcontext's QuerySend(). The second way would be more error-prone but the api key would be better obfuscated.
QuerySend should take Query object argument because all of the parameters should be escaped before performing a libcurl request and to do that, CURL context is needed.

CURLcontext::SendQuery() should be named "Get" or something like that because it basically performs REST GET operation.

For parsing json rapidjson will be used because of its speed. It's licensed under MIT license.
Documentation for it: [[https://miloyip.gitbooks.io/rapidjson/content/en/][here]].

For creating Response we can use a factory that spits out objects corresponding to ~kind~ parameter in json output.
Or we could just use rapidjson output and not worry about custom classes because we don't need to implement all functionality of this API.

** CLI (C++)
yt search "foo"
yt search --order date --max-results 10 "foo"

Some operations require authentication so we could have a daemon running a session for that.

** TUI (Guile)
There are [[https://www.gnu.org/software/guile-ncurses/][ncurses bindings for guile]], so the whole TUI (text-based user interface) could be written in it.

(yt-search "foo")
(yt-search "foo" :order 'date :max-results 10)

* TO DO
** IN-PROGRESS Working, basic search for YouTube [1/3]
*** DONE Video class
CLOSED: [2018-11-29 czw 21:15]
*** TODO VideosOperation
[[*VideosOperation][VideosOperation]]
**** Parameters [0/2]
***** TODO [[*part][part]]
At least ~snippet~ parameter.
***** TODO [[*id][id]]
*** IN-PROGRESS JSON parsing
**** DONE Modify Response class to parse server response to rapidjson::Document
CLOSED: [2018-11-30 pią 16:10]
**** DONE Create a way to extract videos as Video objects from Response
CLOSED: [2018-11-30 pią 23:32]
Response::GetVideos() or something like that
**** TODO Get ids from received video list and create request for those videos to get titles and descriptions
SearchOperation returns a list of items that can be of different type like channel, playlist or video. We could show only results that have id->videoId parameter (channel would have only channelId).
Or we could use ~type=video~ parameter by default when invoking SearchOperation.

If video description is long, SearchOperation will return only part of it, so we could call VideosOperation if ~description~ parameter ends with "..." or make it an option to show entire description.
** TODO Operations
*** TODO SearchOperation [0/2]
[[https://developers.google.com/youtube/v3/docs/search/list][API Reference]]

NOTE: some of the functions would have exactly the same code with different variable names. They should be using a common function.
(Example: ChannelId just adds the given variable value to a query)
**** TODO Parameters [12%]
***** DONE part
CLOSED: [2018-11-19 pon 22:32]
***** TODO forContentOwner
***** TODO forDeveloper
***** TODO forMine
***** TODO relatedToVideoId
***** DONE channelId
CLOSED: [2018-11-19 pon 22:32]
***** TODO channelType
***** TODO eventType
***** TODO location
***** TODO locationRadius
***** DONE maxResults
CLOSED: [2018-11-19 pon 22:32]
***** TODO onBehalfOfContentOwner
***** TODO order
***** TODO pageToken
***** TODO publishedAfter
***** TODO publishedBefore
***** DONE q
CLOSED: [2018-11-19 pon 22:31]
***** TODO regionCode
***** TODO relevanceLanguage
***** TODO safeSearch
***** TODO topicId
***** TODO type
***** TODO videoCaption
***** TODO videoCategoryId
***** TODO videoDefinition
***** TODO videoDimension
***** TODO videoDuration
***** TODO videoEmbeddable
***** TODO videoLicense
***** TODO videoSyndicated
***** TODO videoType

**** TODO Response [0%]
***** TODO kind
***** TODO etag
***** TODO nextPageToken
***** TODO prevPageToken
***** TODO regionCode
***** TODO pageInfo
***** TODO pageInfo.totalResults
***** TODO pageInfo.resultsPerPage
***** TODO items[]
*** TODO VideosOperation
**** TODO Parameters [0%]
***** TODO part
****** TODO contentDetails
****** TODO fileDetails
****** TODO id
****** TODO liveStreamingDetails
****** TODO localizations
****** TODO player
****** TODO processingDetails
****** TODO recordingDetails
****** TODO snippet
****** TODO statistics
****** TODO status
****** TODO suggestions
****** TODO topicDetails
***** TODO chart
***** TODO id
***** TODO myRating
***** TODO hl
***** TODO maxHeight
***** TODO maxResults
***** TODO maxWidth
***** TODO onBehalfOfContentOwner
***** TODO pageToken
***** TODO regionCode
***** TODO videoCategoryId
**** TODO Response [%]
***** TODO kind
***** TODO etag
***** TODO nextPageToken
***** TODO prevPageToken
***** TODO pageInfo
***** TODO pageInfo.totalResults
***** TODO pageInfo.resultsPerPage
***** TODO items[]
