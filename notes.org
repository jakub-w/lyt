* Notes
** Backend/API (C++)
auto query = yt.Search("foo");
query = yt.Search("foo").Order(yt::DATE_ORDER).MaxResults(10);
query.Perform();

This is how .NET does that.

This is the library part. It could be called liblyt (leloYT).

yt.Search(), yt.Videos(), yt.Thumbnails() and other base operations each would return their dedicated objects of class derived from BaseOperation (which is inheriting OperationInterface) that would define functions to set parameters of the query.

Perform() function is defined in BaseOperation and it collects all the set perameters, creates a query and sends it.

Each concrete Operation class has to define set of functions that modify parameters map (parameters_).
For Operations to be savable and modifiable they should store query parameters in variables and generate the query on Perform().
They will be stored in a map. The declaration of this map is in the BaseOperation class.

Perform() is a method defined in each concrete Operation class since every Operation wants to return concrete Response object that corresponds to it.

QuerySend takes Query object argument because all of the parameters should be escaped before performing a libcurl request and to do that, CURL context is needed.

For parsing json rapidjson is used because of its speed. It's licensed under MIT license.
Documentation for it: [[https://miloyip.gitbooks.io/rapidjson/content/en/][here]].

CURLcontext has a template method Get() that returns specified unique pointer to object of class that inherits yt::Response (it checks type with ~static_assert~).
Internally, it calls Get_() that sends the query and returns CURLresponse object storing uri and response content.
Get_() exists because it's a long method that shouldn't be compiled multiple times for multiple return types since it doesn't care what class the user wants to use for output.
Every Operation class will have to call CURLcontext::Get() with a type that it wants to store the CURL response in.

Operations should return Responses of a specific type. We want to be explicit for the sake of Scheme integration. /(Is that so?)/

SearchOperation has Type() method that takes SearchType enum arg. It can be VIDEO, PLAYLIST, CHANNEL or ALL. For now, it isn't capable of taking a mix of those, but maybe in the future it could be a bit mask.

Parameters for the Operation can be set in any order and there is no check if the request is correct. Sometimes there are parameters that are incompatible with others, but the request will be sent as it is. If the request is incorrect, Google's server will send an error in the response.
*Errors are not supported yet, so the assertions in Reponse methods will not be met.* This is TODO.

*speculation*
SearchResponse could use VideosResponse for extracting videos from the json document. The contents of snippet in both is almost the same.
Or use strategy pattern? That way it would be less confusing.
It would be better to create a static function inside of Response class. That way it's encapsulated with the stuff that will use it.
For now, the function was rewritten in VideosResponse
** CLI (C++)
yt search "foo"
yt search --order date --max-results 10 "foo"

Some operations require authentication so we could have a daemon running a session for that.

Maybe use Guile also for the CLI? [[https://www.gnu.org/software/guile/manual/html_node/Command-Line-Handling.html][Link to manual]]

** TUI (Guile)
There are [[https://www.gnu.org/software/guile-ncurses/][ncurses bindings for guile]], so the whole TUI (text-based user interface) could be written in it.

[[info:guile-ncurses#Curses%20Tutorial][Guile Curses Tutorial]]

(yt-search "foo")
(yt-search "foo" :order 'date :max-results 10)

* TO DO
** DONE Refactor Video class [2/2]
CLOSED: [2019-02-01 pią 21:11]
*** DONE Setters for Video class
CLOSED: [2019-02-01 pią 14:58]
Maybe it would be better to create setters for Video class' data members so it would be possibile to add additional information about a video. That would eliminate that awful constructor with million arguments.
/Maybe create only rvalue setters?/
*** DONE Convert the date in publishedAt to be human-readable
CLOSED: [2019-02-01 pią 21:11]
** IN-PROGRESS Working, basic search for YouTube [3/4]
*** DONE Video class
CLOSED: [2018-11-29 czw 21:15]
*** DONE Refactor Response [4/4]
CLOSED: [2019-01-29 wto 16:01]
**** DONE Refactor Query class
CLOSED: [2018-12-01 sob 15:56]
**** DONE Add extracting videos stuff to SearchResponse
CLOSED: [2018-12-01 sob 16:03]
**** DONE Remove extracting videos stuff from Response
CLOSED: [2018-12-01 sob 17:06]
Maybe make it an abstract class.
**** DONE Find a way to return certain Response objects with CURLcontext (Create Data class with SearchData inheriting from it)
CLOSED: [2019-01-29 wto 16:01]
Response class should contain some data structure that is inherent to only the certain type of response. This would mean that creating child classes of Response would be not necessary. Just create this Data interface and SearchData and so could be an instance of it.
*** DONE VideosOperation
CLOSED: [2019-02-04 pon 14:08]
[[*VideosOperation][VideosOperation]]
**** Parameters [2/2]
***** DONE [[*part][part]]
CLOSED: [2019-02-04 pon 14:08]
At least ~snippet~ parameter.
***** DONE [[*id][id]]
CLOSED: [2019-02-04 pon 14:08]
*** IN-PROGRESS JSON parsing [3/4]
**** DONE Modify Response class to parse server response to rapidjson::Document
CLOSED: [2018-11-30 pią 16:10]
**** DONE Create a way to extract videos as Video objects from Response
CLOSED: [2018-11-30 pią 23:32]
Response::GetVideos() or something like that
**** DONE [BUG] Escape parameters before sending a query
CLOSED: [2018-12-01 sob 00:08]
libcurl doesn't escape spaces in an url, it can be done by using curl_easy_escape(), but it requires CURL handle
[[file:BaseOperation.cpp:://%20FIXME:%20every%20parameter%20value%20should%20be%20escaped][Here]]
**** IN-PROGRESS Get ids from received video list and create request for those videos to get titles and descriptions
SearchOperation returns a list of items that can be of different type like channel, playlist or video. We could show only results that have id->videoId parameter (channel would have only channelId).
Or we could use ~type=video~ parameter by default when invoking SearchOperation.

If video description is long, SearchOperation will return only part of it, so we could call VideosOperation if ~description~ parameter ends with "..." or make it an option to show the entire description.
Thumbnail list is also longer in VideosOperation.
***** IN-PROGRESS Create a constructor for VideoOperation that takes a vector of Videos (or SearchResponse) as an argument
For every video it should add all absent details (thumbnails, description, tags, category_id).
***** TODO If there is no DescriptionShortened, create it from the Description
Limit is 164 characters (but if the word must be cut in half, it is cut entirely) + " ..."

164 chars (with space and dots 168)
** TODO Errors
If search parameters are wrong, YouTube API will respond with errors, which should be handled, because for now, if that occurs, program will just throw or segmentation fault or assertion will fail (when in debug mode).
** TODO Operations
*** TODO SearchOperation [0/2]
[[https://developers.google.com/youtube/v3/docs/search/list][API Reference]]

NOTE: some of the functions would have exactly the same code with different variable names. They should be using a common function.
(Example: ChannelId just adds the given variable value to a query)
**** TODO Parameters [64%]
Some parameters are not compatible with others. For instance ~relatedToVideoId~ parameter works only if ~type~ parameter is set to video.
Note that parameters can be set in any order so checking if some other parameter is set while setting another is not sufficient.
Either there won't be a check for anything and the request will be just send as it is, or the system is developed for checking correctness of the request while Perform() is executing.

For now, there will be no check.
***** DONE part
CLOSED: [2018-11-19 pon 22:32]
***** DONE forContentOwner
CLOSED: [2019-02-02 sob 12:17]
***** DONE forDeveloper
CLOSED: [2019-02-02 sob 12:17]
***** DONE forMine
CLOSED: [2019-02-02 sob 12:17]
***** DONE relatedToVideoId
CLOSED: [2019-02-02 sob 12:18]
***** DONE channelId
CLOSED: [2018-11-19 pon 22:32]
***** DONE eventType
CLOSED: [2019-02-02 sob 12:18]
***** DONE location
CLOSED: [2019-02-02 sob 12:18]
***** DONE locationRadius
CLOSED: [2019-02-02 sob 12:18]
***** DONE maxResults
CLOSED: [2018-11-19 pon 22:32]
***** DONE onBehalfOfContentOwner
CLOSED: [2019-02-02 sob 12:18]
***** DONE pageToken
CLOSED: [2019-02-02 sob 12:18]
***** DONE publishedAfter
CLOSED: [2019-02-02 sob 12:18]
***** DONE publishedBefore
CLOSED: [2019-02-02 sob 12:18]
***** DONE q
CLOSED: [2018-11-19 pon 22:31]
***** DONE regionCode
CLOSED: [2019-02-02 sob 12:18]
***** DONE relevanceLanguage
CLOSED: [2019-02-02 sob 12:18]
***** DONE topicId
CLOSED: [2019-02-02 sob 12:18]
***** DONE type
CLOSED: [2019-02-02 sob 12:20]
****** DONE Basic functionality
CLOSED: [2019-02-01 pią 12:50]
By default type=video
The default type is set in a constructor.

For now only one or all types can be set at the same time.
***** DONE videoCategoryId
CLOSED: [2019-02-02 sob 12:19]
***** TODO channelType
***** TODO order
***** TODO safeSearch
***** TODO videoCaption
***** TODO videoDefinition
***** TODO videoDimension
***** TODO videoDuration
***** TODO videoEmbeddable
***** TODO videoLicense
***** TODO videoSyndicated
***** TODO videoType
**** TODO Response [0%]
***** IN-PROGRESS Create Playlists() and Channels() methods.
****** TODO Create Playlist class
****** TODO Create Channel class
***** TODO kind
***** TODO etag
***** TODO nextPageToken
***** TODO prevPageToken
***** TODO regionCode
***** TODO pageInfo
***** TODO pageInfo.totalResults
***** TODO pageInfo.resultsPerPage
***** TODO items[]
*** TODO VideosOperation
**** TODO Parameters [8%]
***** TODO part
****** TODO contentDetails
****** TODO fileDetails
****** TODO id
****** TODO liveStreamingDetails
****** TODO localizations
****** TODO player
****** TODO processingDetails
****** TODO recordingDetails
****** DONE snippet
CLOSED: [2019-02-04 pon 15:11]
****** TODO statistics
****** TODO status
****** TODO suggestions
****** TODO topicDetails
***** TODO chart
***** DONE id
CLOSED: [2019-02-04 pon 15:11]
***** TODO myRating
***** TODO hl
***** TODO maxHeight
***** TODO maxResults
***** TODO maxWidth
***** TODO onBehalfOfContentOwner
***** TODO pageToken
***** TODO regionCode
***** TODO videoCategoryId
**** TODO Response [%]
***** TODO kind
***** TODO etag
***** TODO nextPageToken
***** TODO prevPageToken
***** TODO pageInfo
***** TODO pageInfo.totalResults
***** TODO pageInfo.resultsPerPage
***** TODO items[]
** TODO Documentation
For Backend/API look at the [[*Backend/API (C++)][Backend/API (C++)]] notes and the commit message from [[elisp:(magit-show-commit "5e5851625d78abc58154c551ccc75c9c470e1f20")][this commit]].
